#!/bin/bash

# 设置默认深度为 1
depth=1

# 检查是否传递了深度参数
if [ $# -gt 0 ]; then
  if [[ "$1" =~ ^-?[0-9]+$ ]]; then
    depth="$1"
    shift
  fi
fi

# 获取起始目录
start_dir="${1:-.}"

# 函数：递归打印目录树
print_directory_tree() {
  local current_dir="$1"
  local current_depth="$2"
  local indent="$3"

  # 获取当前目录下的所有文件和目录
  local items
  items=$(find "$current_dir" -maxdepth 1 -not -path "$current_dir" -print | sort)
  
  # 计算项目总数
  local total_items=$(echo "$items" | wc -l | tr -d ' ')
  local current_item=0
  
  # 循环处理每个项目
  echo "$items" | while IFS= read -r item; do
    current_item=$((current_item + 1))
    local name=$(basename "$item")

    # 计算大小
    local size=$(du -sh "$item" 2>/dev/null | awk '{print $1}')
    
    # 确定使用的连接符号（最后一项使用 └，其他项使用 ├）
    local connector="├"
    local next_indent="${indent}│   "
    if [ $current_item -eq $total_items ]; then
      connector="└"
      next_indent="${indent}    "
    fi

    # 打印当前项目
    echo -e "${indent}${connector}── [$size] $name"

    # 如果是目录，并且深度未达到限制，则递归调用
    if [ -d "$item" ] && [ "$current_depth" -lt "$depth" ]; then
      local new_depth=$((current_depth + 1))
      print_directory_tree "$item" "$new_depth" "$next_indent"
    fi
  done
}

# 打印起始目录
size=$(du -sh "$start_dir" 2>/dev/null | awk '{print $1}')
echo "[$size] $(basename "$start_dir")"

# 打印目录树
print_directory_tree "$start_dir" 1 "    "

exit 0
